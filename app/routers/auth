from fastapi import APIRouter, HTTPException, Depends
from app.models import UserRegister, UserLogin
from datetime import datetime, timedelta
from jose import JWTError, jwt

router = APIRouter(prefix="/auth", tags=["auth"])

# Secret key and algorithm
SECRET_KEY = "secretjwtkey123"
ALGORITHM = "HS256"

fake_users_db = {}

def create_token(data: dict, expires_delta: timedelta = timedelta(hours=1)):
    to_encode = data.copy()
    expire = datetime.utcnow() + expires_delta
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

@router.post("/register")
def register(user: UserRegister):
    if user.username in fake_users_db:
        raise HTTPException(status_code=400, detail="Username already exists")
    fake_users_db[user.username] = user
    return {"msg": "User registered successfully"}

@router.post("/login")
def login(user: UserLogin):
    db_user = fake_users_db.get(user.username)
    if not db_user or db_user.password != user.password:
        raise HTTPException(status_code=401, detail="Invalid credentials")
    token = create_token({"sub": user.username})
    return {"access_token": token, "token_type": "bearer"}
